def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdkVersion 33

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
        checkReleaseBuilds false
    }

    defaultConfig {
        applicationId "com.barcelona.rec"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        multiDexEnabled true
    }

    signingConfigs {
        release {
           keyAlias keystoreProperties['keyAlias']
           keyPassword keystoreProperties['keyPassword']
           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
           storePassword keystoreProperties['storePassword']
        }
    }

    android.applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def appName = "RecBarcelona"
            def buildType = variant.buildType.name
            def newName
            if (buildType == 'debug'){
                newName = "${appName}-${defaultConfig.versionName}+${defaultConfig.versionCode}-${variant.getFlavorName()}-debug.apk"
            } else {
                newName = "${appName}-${defaultConfig.versionName}+${defaultConfig.versionCode}-${variant.getFlavorName()}.apk"
            }
            output.outputFileName = newName
        }
    }

    buildTypes {
        release {
           signingConfig signingConfigs.release
        }

        debug {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "default"
    productFlavors {
        rec_sandbox {
            dimension "default"
            applicationId "com.barcelona.rec"
            versionNameSuffix "-sandbox"
            manifestPlaceholders = [uri: "rec.barcelona"]
        }

        rec_pre {
            dimension "default"
            applicationId "com.barcelona.prec"
            versionNameSuffix "-pre"
            manifestPlaceholders = [uri: "rec.barcelona"]
        }

        rec_prod {
            dimension "default"
            applicationId "com.barcelona.rec"
            manifestPlaceholders = [uri: "rec.barcelona"]
        }

        larosa_pre {
            dimension "default"
            applicationId "cat.santfeliu.larosa_pre"
            versionNameSuffix "-rosa-pre"
            manifestPlaceholders = [uri: "larosa.santfeliu.cat"]
        }
        
        larosa_sandbox {
            dimension "default"
            applicationId "cat.santfeliu.larosa"
            versionNameSuffix "-larosa-sandbox"
            manifestPlaceholders = [uri: "larosa.santfeliu.cat"]
        }

        larosa_prod {
            dimension "default"
            applicationId "cat.santfeliu.larosa"
            versionNameSuffix "-larosa"
            manifestPlaceholders = [uri: "larosa.santfeliu.cat"]
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
